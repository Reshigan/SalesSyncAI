// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("USER")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  customers Customer[]
  leads     Lead[]
  visits    Visit[]
  sales     Sale[]

  @@map("users")
}

model Customer {
  id        String   @id @default(uuid())
  userId    String
  name      String
  email     String?
  phone     String?
  company   String?
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  visits Visit[]
  sales  Sale[]

  @@map("customers")
}

model Lead {
  id        String   @id @default(uuid())
  userId    String
  name      String
  email     String
  phone     String?
  company   String?
  status    String   @default("NEW")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  visits Visit[]

  @@map("leads")
}

model Visit {
  id         String   @id @default(uuid())
  userId     String
  leadId     String?
  customerId String?
  visitDate  DateTime
  status     String   @default("PLANNED")
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lead     Lead?     @relation(fields: [leadId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  sales    Sale[]

  @@map("visits")
}

model Sale {
  id         String   @id @default(uuid())
  userId     String
  customerId String
  visitId    String?
  amount     Float
  saleDate   DateTime @default(now())
  status     String   @default("COMPLETED")
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  visit    Visit?    @relation(fields: [visitId], references: [id], onDelete: SetNull)

  @@map("sales")
}