// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE SYSTEM MODELS
// ============================================================================

model Company {
  id                String   @id @default(uuid())
  name              String
  slug              String   @unique
  logo              String?
  settings          Json     @default("{}")
  subscriptionTier  String   @default("basic")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  users             User[]
  warehouses        Warehouse[]
  customers         Customer[]
  products          Product[]
  brands            Brand[]
  campaigns         Campaign[]
  visits            Visit[]
  sales             Sale[]
  surveys           Survey[]
  activations       Activation[]
  stockMovements    StockMovement[]
  cashReconciliations CashReconciliation[]
  marketingCampaigns MarketingCampaign[]
  agentBehaviorProfiles AgentBehaviorProfile[]
  fraudDetectionLogs FraudDetectionLog[]
  notifications     Notification[]
  notificationTemplates NotificationTemplate[]

  @@map("companies")
}

model User {
  id          String   @id @default(uuid())
  companyId   String
  email       String
  password    String
  firstName   String
  lastName    String
  phone       String?
  role        UserRole
  permissions Json     @default("[]")
  profile     Json     @default("{}")
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  company             Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assignedWarehouses  UserWarehouse[]
  visits              Visit[]
  sales               Sale[]
  stockDraws          StockDraw[]
  cashReconciliations CashReconciliation[]
  activationAssignments ActivationAssignment[]
  fraudInvestigations FraudInvestigation[]
  createdMarketingCampaigns MarketingCampaign[]
  campaignPerformances CampaignPerformance[]
  campaignTrackings   CampaignTracking[]
  streetMarketingSessions StreetMarketingSession[]
  agentBehaviorProfile AgentBehaviorProfile?
  fraudDetectionLogs  FraudDetectionLog[]
  investigatedFraudLogs FraudDetectionLog[] @relation("FraudInvestigator")
  notifications       Notification[]
  inAppNotifications  InAppNotification[]
  pushSubscriptions   PushSubscription[]

  @@unique([companyId, email])
  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  COMPANY_ADMIN
  REGIONAL_MANAGER
  AREA_MANAGER
  TEAM_LEADER
  SENIOR_AGENT
  AGENT
  FIELD_SALES_AGENT
  FIELD_MARKETING_AGENT
  PROMOTER
}

// ============================================================================
// WAREHOUSE & INVENTORY MODELS
// ============================================================================

model Warehouse {
  id          String   @id @default(uuid())
  companyId   String
  name        String
  address     String
  coordinates Json?    // {lat: number, lng: number}
  managerId   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assignedUsers   UserWarehouse[]
  stockLevels     StockLevel[]
  stockDraws      StockDraw[]
  stockMovements  StockMovement[]

  @@map("warehouses")
}

model UserWarehouse {
  id          String @id @default(uuid())
  userId      String
  warehouseId String

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([userId, warehouseId])
  @@map("user_warehouses")
}

model Product {
  id          String   @id @default(uuid())
  companyId   String
  brandId     String?
  name        String
  description String?
  sku         String
  barcode     String?
  category    String
  unitPrice   Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  brand         Brand?  @relation(fields: [brandId], references: [id])
  stockLevels   StockLevel[]
  stockDrawItems StockDrawItem[]
  saleItems     SaleItem[]
  stockMovements StockMovement[]

  @@unique([companyId, sku])
  @@map("products")
}

model Brand {
  id          String   @id @default(uuid())
  companyId   String
  name        String
  logo        String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  products      Product[]
  campaigns     Campaign[]
  questionnaires BrandQuestionnaire[]

  @@map("brands")
}

model StockLevel {
  id          String   @id @default(uuid())
  warehouseId String
  productId   String
  quantity    Int
  reservedQty Int      @default(0)
  updatedAt   DateTime @updatedAt

  // Relationships
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([warehouseId, productId])
  @@map("stock_levels")
}

model StockDraw {
  id            String           @id @default(uuid())
  agentId       String
  warehouseId   String
  totalValue    Decimal          @db.Decimal(10, 2)
  status        StockDrawStatus  @default(PENDING)
  approvedBy    String?
  approvedAt    DateTime?
  gpsLocation   Json?            // {lat: number, lng: number, accuracy: number}
  qrVerified    Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relationships
  agent     User        @relation(fields: [agentId], references: [id], onDelete: Cascade)
  warehouse Warehouse   @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  items     StockDrawItem[]

  @@map("stock_draws")
}

enum StockDrawStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model StockDrawItem {
  id              String  @id @default(uuid())
  stockDrawId     String
  productId       String
  requestedQty    Int
  approvedQty     Int?
  unitPrice       Decimal @db.Decimal(10, 2)
  expiryDate      DateTime?
  batchNumber     String?

  // Relationships
  stockDraw StockDraw @relation(fields: [stockDrawId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_draw_items")
}

model StockMovement {
  id          String            @id @default(uuid())
  companyId   String
  warehouseId String?
  productId   String
  type        StockMovementType
  quantity    Int
  reference   String?           // Reference to related record (sale, draw, etc.)
  notes       String?
  createdAt   DateTime          @default(now())

  // Relationships
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  warehouse Warehouse? @relation(fields: [warehouseId], references: [id])
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_movements")
}

enum StockMovementType {
  STOCK_IN
  STOCK_OUT
  TRANSFER
  ADJUSTMENT
  DAMAGE
  EXPIRED
}

// ============================================================================
// CUSTOMER & VISIT MODELS
// ============================================================================

model Customer {
  id            String   @id @default(uuid())
  companyId     String
  name          String
  contactPerson String?
  phone         String?
  email         String?
  address       String
  coordinates   Json?    // {lat: number, lng: number}
  category      String?
  creditLimit   Decimal? @db.Decimal(10, 2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  visits  Visit[]
  sales   Sale[]

  @@map("customers")
}

model Visit {
  id              String      @id @default(uuid())
  companyId       String
  agentId         String
  customerId      String
  plannedStartTime DateTime?
  actualStartTime DateTime?
  actualEndTime   DateTime?
  status          VisitStatus @default(PLANNED)
  gpsLocation     Json?       // {arrival: {lat, lng}, departure: {lat, lng}}
  activities      Json        @default("[]") // Array of activities completed
  photos          Json        @default("[]") // Array of photo URLs and metadata
  notes           String?
  syncStatus      SyncStatus  @default(LOCAL)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relationships
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  agent         User    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sales         Sale[]
  surveyResponses SurveyResponse[]
  assetAudits   AssetAudit[]

  @@map("visits")
}

enum VisitStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum SyncStatus {
  LOCAL
  SYNCED
  ERROR
}

// ============================================================================
// SALES & FINANCIAL MODELS
// ============================================================================

model Sale {
  id            String      @id @default(uuid())
  companyId     String
  agentId       String
  customerId    String
  visitId       String?
  invoiceNumber String      @unique
  totalAmount   Decimal     @db.Decimal(10, 2)
  taxAmount     Decimal     @db.Decimal(10, 2) @default(0)
  discountAmount Decimal    @db.Decimal(10, 2) @default(0)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  paidAmount    Decimal     @db.Decimal(10, 2) @default(0)
  dueDate       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relationships
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  agent     User       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  customer  Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  visit     Visit?     @relation(fields: [visitId], references: [id])
  items     SaleItem[]
  payments  Payment[]

  @@map("sales")
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  BANK_TRANSFER
  CREDIT
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  discount  Decimal @db.Decimal(10, 2) @default(0)
  total     Decimal @db.Decimal(10, 2)

  // Relationships
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model Payment {
  id            String        @id @default(uuid())
  saleId        String
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  reference     String?
  status        PaymentStatus @default(PENDING)
  processedAt   DateTime?
  createdAt     DateTime      @default(now())

  // Relationships
  sale Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model CashReconciliation {
  id                String                    @id @default(uuid())
  companyId         String
  agentId           String
  date              DateTime
  startingFloat     Decimal                   @db.Decimal(10, 2)
  cashSales         Decimal                   @db.Decimal(10, 2)
  cashReceived      Decimal                   @db.Decimal(10, 2)
  changeGiven       Decimal                   @db.Decimal(10, 2)
  physicalCount     Json                      // Cash count by denomination
  variance          Decimal                   @db.Decimal(10, 2)
  varianceExplanation String?
  expenses          Json                      @default("[]") // Business expenses
  depositAmount     Decimal                   @db.Decimal(10, 2)
  depositStatus     CashReconciliationStatus  @default(PENDING)
  status            CashReconciliationStatus  @default(PENDING)
  managerApproval   Json?                     // Manager approval details
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt

  // Relationships
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  agent   User    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("cash_reconciliations")
}

enum CashReconciliationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REQUIRES_APPROVAL
  APPROVED
  REJECTED
}

// ============================================================================
// SURVEY & QUESTIONNAIRE MODELS
// ============================================================================

model Survey {
  id          String   @id @default(uuid())
  companyId   String
  title       String
  description String?
  questions   Json     // Array of question objects
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  responses SurveyResponse[]

  @@map("surveys")
}

model BrandQuestionnaire {
  id                    String   @id @default(uuid())
  brandId               String
  title                 String
  questions             Json     // Array of question objects with photo requirements
  estimatedDuration     Int      // Minutes
  incentivePerCompletion Decimal @db.Decimal(10, 2) @default(0)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  brand     Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  responses SurveyResponse[]

  @@map("brand_questionnaires")
}

model SurveyResponse {
  id                    String   @id @default(uuid())
  surveyId              String?
  brandQuestionnaireId  String?
  visitId               String?
  agentId               String
  responses             Json     // Array of question responses
  completionTime        Int      // Seconds taken to complete
  qualityScore          Decimal? @db.Decimal(5, 2) // AI-calculated quality score
  fraudRiskScore        Decimal? @db.Decimal(5, 2) // Fraud detection score
  createdAt             DateTime @default(now())

  // Relationships
  survey              Survey?             @relation(fields: [surveyId], references: [id])
  brandQuestionnaire  BrandQuestionnaire? @relation(fields: [brandQuestionnaireId], references: [id])
  visit               Visit?              @relation(fields: [visitId], references: [id])

  @@map("survey_responses")
}

// ============================================================================
// CAMPAIGN & MARKETING MODELS
// ============================================================================

model Campaign {
  id          String         @id @default(uuid())
  companyId   String
  brandId     String?
  name        String
  description String?
  type        CampaignType
  startDate   DateTime
  endDate     DateTime
  budget      Decimal?       @db.Decimal(10, 2)
  status      CampaignStatus @default(DRAFT)
  materials   Json           @default("[]") // Campaign materials
  targets     Json           @default("{}") // Campaign targets and KPIs
  territories Json           @default("[]") // Geographic territories
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  brand       Brand?  @relation(fields: [brandId], references: [id])
  activations Activation[]

  @@map("campaigns")
}

enum CampaignType {
  FIELD_MARKETING
  STREET_MARKETING
  BRAND_ACTIVATION
  PRODUCT_LAUNCH
  PROMOTIONAL
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

model Activation {
  id              String           @id @default(uuid())
  companyId       String
  campaignId      String
  name            String
  description     String?
  location        Json             // Location details and coordinates
  scheduledStart  DateTime
  scheduledEnd    DateTime
  actualStart     DateTime?
  actualEnd       DateTime?
  status          ActivationStatus @default(SCHEDULED)
  requiredMaterials Json           @default("[]")
  targetMetrics   Json             @default("{}")
  gpsTracking     Json?            // GPS tracking data
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  assignments ActivationAssignment[]
  performance ActivationPerformance[]

  @@map("activations")
}

enum ActivationStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model ActivationAssignment {
  id           String @id @default(uuid())
  activationId String
  promoterId   String
  role         String @default("promoter")
  assignedAt   DateTime @default(now())

  // Relationships
  activation Activation @relation(fields: [activationId], references: [id], onDelete: Cascade)
  promoter   User       @relation(fields: [promoterId], references: [id], onDelete: Cascade)

  @@unique([activationId, promoterId])
  @@map("activation_assignments")
}

model ActivationPerformance {
  id                  String   @id @default(uuid())
  activationId        String
  promoterId          String
  customerInteractions Json    @default("[]") // Array of customer interactions
  contentCreated      Json     @default("[]") // Photos, videos, etc.
  salesGenerated      Json     @default("[]") // Sales made during activation
  performanceMetrics  Json     @default("{}") // KPIs and metrics
  qualitativeReport   String?
  recommendations     Json     @default("[]")
  createdAt           DateTime @default(now())

  // Relationships
  activation Activation @relation(fields: [activationId], references: [id], onDelete: Cascade)

  @@map("activation_performance")
}

// ============================================================================
// ASSET MANAGEMENT MODELS
// ============================================================================

model AssetAudit {
  id        String   @id @default(uuid())
  visitId   String
  assetType String   // refrigerator, cooler, signage, etc.
  assetId   String?  // Reference to specific asset if tracked
  condition String   // good, damaged, missing, etc.
  photos    Json     @default("[]") // Asset photos
  notes     String?
  createdAt DateTime @default(now())

  // Relationships
  visit Visit @relation(fields: [visitId], references: [id], onDelete: Cascade)

  @@map("asset_audits")
}

// ============================================================================
// FRAUD DETECTION MODELS
// ============================================================================

model FraudInvestigation {
  id          String                    @id @default(uuid())
  agentId     String
  fraudType   Json                      // Array of fraud types detected
  severity    FraudSeverity
  status      FraudInvestigationStatus  @default(OPEN)
  evidence    Json                      @default("[]") // Evidence collected
  findings    String?
  resolution  Json?                     // Investigation resolution
  investigatorId String?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  // Relationships
  agent       User @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("fraud_investigations")
}

enum FraudSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FraudInvestigationStatus {
  OPEN
  IN_PROGRESS
  UNDER_REVIEW
  CLOSED
}

// ============================================================================
// SYSTEM & AUDIT MODELS
// ============================================================================

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  companyId String?
  action    String
  resource  String
  resourceId String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model SystemNotification {
  id        String              @id @default(uuid())
  userId    String?
  companyId String?
  type      NotificationType
  title     String
  message   String
  data      Json?               @default("{}")
  isRead    Boolean             @default(false)
  createdAt DateTime            @default(now())

  @@map("system_notifications")
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  CAMPAIGN_UPDATE
  STOCK_ALERT
  FRAUD_ALERT
  SYSTEM_MAINTENANCE
}

// ============================================================================
// ADDITIONAL MODELS FOR ADVANCED FEATURES
// ============================================================================

model MarketingCampaign {
  id                String   @id @default(uuid())
  companyId         String
  name              String
  description       String?
  type              String
  status            String   @default("DRAFT")
  startDate         DateTime?
  endDate           DateTime?
  budget            Decimal? @db.Decimal(10, 2)
  targetAudience    Json?    @default("{}")
  materials         Json?    @default("{}")
  settings          Json?    @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String

  // Relationships
  company           Company  @relation(fields: [companyId], references: [id])
  creator           User     @relation(fields: [createdBy], references: [id])
  performances      CampaignPerformance[]
  trackings         CampaignTracking[]
  streetMarketingSessions StreetMarketingSession[]

  @@map("marketing_campaigns")
}

model CampaignPerformance {
  id                String   @id @default(uuid())
  campaignId        String
  agentId           String
  date              DateTime @default(now())
  impressions       Int      @default(0)
  interactions      Int      @default(0)
  conversions       Int      @default(0)
  revenue           Decimal? @db.Decimal(10, 2)
  metrics           Json?    @default("{}")
  createdAt         DateTime @default(now())

  // Relationships
  campaign          MarketingCampaign @relation(fields: [campaignId], references: [id])
  agent             User              @relation(fields: [agentId], references: [id])

  @@map("campaign_performances")
}

model CampaignTracking {
  id                String   @id @default(uuid())
  campaignId        String
  agentId           String
  eventType         String
  eventData         Json?    @default("{}")
  location          Json?    @default("{}")
  timestamp         DateTime @default(now())

  // Relationships
  campaign          MarketingCampaign @relation(fields: [campaignId], references: [id])
  agent             User              @relation(fields: [agentId], references: [id])

  @@map("campaign_trackings")
}

model StreetMarketingSession {
  id                String   @id @default(uuid())
  campaignId        String
  agentId           String
  location          Json?    @default("{}")
  startTime         DateTime
  endTime           DateTime?
  status            String   @default("ACTIVE")
  targetMetrics     Json?    @default("{}")
  actualMetrics     Json?    @default("{}")
  customerData      Json?    @default("{}")
  fraudRiskScore    Float?   @default(0)
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  campaign          MarketingCampaign @relation(fields: [campaignId], references: [id])
  agent             User              @relation(fields: [agentId], references: [id])

  @@map("street_marketing_sessions")
}

model AgentBehaviorProfile {
  id                String   @id @default(uuid())
  agentId           String   @unique
  companyId         String
  behaviorMetrics   Json     @default("{}")
  riskScore         Float    @default(0)
  lastUpdated       DateTime @updatedAt
  createdAt         DateTime @default(now())

  // Relationships
  agent             User     @relation(fields: [agentId], references: [id])
  company           Company  @relation(fields: [companyId], references: [id])

  @@map("agent_behavior_profiles")
}

model FraudDetectionLog {
  id                String   @id @default(uuid())
  agentId           String
  companyId         String
  eventType         String
  riskScore         Float
  evidence          Json     @default("{}")
  autoActions       Json     @default("{}")
  status            String   @default("PENDING")
  investigatedBy    String?
  resolution        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  agent             User     @relation(fields: [agentId], references: [id])
  company           Company  @relation(fields: [companyId], references: [id])
  investigator      User?    @relation("FraudInvestigator", fields: [investigatedBy], references: [id])

  @@map("fraud_detection_logs")
}

model Notification {
  id                String   @id @default(uuid())
  userId            String
  companyId         String
  type              String
  title             String
  message           String
  data              Json?    @default("{}")
  channels          Json     @default("{}")
  status            String   @default("PENDING")
  sentAt            DateTime?
  readAt            DateTime?
  createdAt         DateTime @default(now())

  // Relationships
  user              User     @relation(fields: [userId], references: [id])
  company           Company  @relation(fields: [companyId], references: [id])

  @@map("notifications")
}

model InAppNotification {
  id                String   @id @default(uuid())
  userId            String
  title             String
  message           String
  type              String   @default("INFO")
  data              Json?    @default("{}")
  isRead            Boolean  @default(false)
  readAt            DateTime?
  createdAt         DateTime @default(now())

  // Relationships
  user              User     @relation(fields: [userId], references: [id])

  @@map("in_app_notifications")
}

model PushSubscription {
  id                String   @id @default(uuid())
  userId            String
  endpoint          String
  keys              Json
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  user              User     @relation(fields: [userId], references: [id])

  @@map("push_subscriptions")
}

model NotificationTemplate {
  id                String   @id @default(uuid())
  companyId         String
  name              String
  type              String
  subject           String?
  content           String
  variables         Json?    @default("{}")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  company           Company  @relation(fields: [companyId], references: [id])

  @@map("notification_templates")
}