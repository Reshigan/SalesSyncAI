# Production Dockerfile for SalesSync Backend
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    py3-pip \
    make \
    g++ \
    pkgconfig \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    musl-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    librsvg-dev \
    openssl \
    openssl-dev \
    libc6-compat && \
    ln -sf python3 /usr/bin/python

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install all dependencies (including dev dependencies for build)
RUN npm install && npm cache clean --force

# Copy source code
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build TypeScript
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies including OpenSSL
RUN apk add --no-cache \
    dumb-init \
    curl \
    python3 \
    cairo \
    jpeg \
    pango \
    musl \
    giflib \
    pixman \
    pangomm \
    libjpeg-turbo \
    freetype \
    librsvg \
    openssl \
    openssl-dev \
    libc6-compat && \
    ln -sf python3 /usr/bin/python

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S salessync -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy package files and built node_modules from builder stage
COPY package*.json ./
COPY prisma ./prisma/
COPY --from=builder --chown=salessync:nodejs /app/node_modules ./node_modules

# Generate Prisma client for production
RUN npx prisma generate

# Copy built application from builder stage
COPY --from=builder --chown=salessync:nodejs /app/dist ./dist

# Copy seeding scripts and other necessary files
COPY --chown=salessync:nodejs seed-production-demo.js ./
COPY --chown=salessync:nodejs simple-seed.js ./
COPY --chown=salessync:nodejs simple-production-server.js ./

# Create necessary directories
RUN mkdir -p logs uploads && chown -R salessync:nodejs logs uploads

# Switch to non-root user
USER salessync

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start application with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]