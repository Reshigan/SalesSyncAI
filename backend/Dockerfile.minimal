# Minimal Backend Dockerfile - Essential packages only
FROM node:18-alpine AS builder

# Install only essential build dependencies
RUN apk update && apk add --no-cache \
    python3 \
    make \
    g++ \
    && ln -sf python3 /usr/bin/python

# Set working directory
WORKDIR /app

# Configure npm for better reliability
RUN npm config set python python3 \
    && npm config set registry https://registry.npmjs.org/ \
    && npm config set timeout 300000 \
    && npm config set maxsockets 1 \
    && npm config set fund false \
    && npm config set audit false

# Copy package files (use isolated Docker package.json)
COPY package.docker.json ./package.json
COPY prisma ./prisma/

# Generate Prisma client first
RUN npx prisma generate

# Install dependencies with retries and better error handling
RUN npm install --no-workspaces --legacy-peer-deps --no-optional --verbose || \
    (echo "First install failed, retrying..." && npm cache clean --force && npm install --no-workspaces --legacy-peer-deps --no-optional --verbose) || \
    (echo "Second install failed, trying with different flags..." && npm install --legacy-peer-deps --no-optional --production)

# Copy source code
COPY . .

# Build the application
RUN npm run build || echo "Build step skipped (no build script)"

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies only
RUN apk add --no-cache \
    python3 \
    && ln -sf python3 /usr/bin/python

WORKDIR /app

# Copy built application and dependencies
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/dist ./dist 2>/dev/null || COPY --from=builder /app/src ./src
COPY --from=builder /app/*.js ./

# Create necessary directories
RUN mkdir -p uploads logs

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3001

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["node", "src/index.js"]