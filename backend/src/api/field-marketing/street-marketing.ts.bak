import { Router, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { AuthenticatedRequest, authMiddleware } from '../../middleware/auth';

const router = Router();
const prisma = new PrismaClient();

// Start street marketing interaction
router.post('/interactions', authMiddleware, async (req: AuthenticatedRequest, res: Response) => {
  try {
    const {
      campaignId,
      location,
      customerData
    } = req.body;

    // For now, just create a simple record in the visits table
    const visit = await prisma.visit.create({
      data: {
        companyId: req.user!.companyId,
        agentId: req.user!.id,
        customerId: customerData?.customerId || null,
        plannedStartTime: new Date(),
        actualStartTime: new Date(),
        // location: location || {},
        status: 'IN_PROGRESS',
        // visitType: 'STREET_MARKETING',
        notes: `Street marketing interaction for campaign ${campaignId}`
      }
    });

    res.status(201).json({
      success: true,
      data: {
        interactionId: visit.id,
        status: 'started',
        message: 'Street marketing interaction started successfully'
      }
    });
  } catch (error) {
    console.error('Error starting street marketing interaction:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to start street marketing interaction'
    });
  }
});

// Complete street marketing interaction
router.put('/interactions/:id/complete', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
  try {
    const {
      customerData,
      registrationSuccess,
      commissionAmount,
      notes
    } = req.body;

    const visit = await prisma.visit.update({
      where: {
        id: req.params.id,
        companyId: req.user!.companyId,
        agentId: req.user!.id
      },
      data: {
        actualEndTime: new Date(),
        status: 'COMPLETED',
        notes: notes || 'Street marketing interaction completed',
        // outcome: registrationSuccess ? 'SUCCESS' : 'NO_SALE'
      }
    });

    res.json({
      success: true,
      data: {
        interactionId: visit.id,
        status: 'completed',
        registrationSuccess: registrationSuccess || false,
        commissionAmount: commissionAmount || 0
      }
    });
  } catch (error) {
    console.error('Error completing street marketing interaction:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to complete street marketing interaction'
    });
  }
});

// Get street marketing performance
router.get('/performance', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
  try {
    const { startDate, endDate, campaignId } = req.query;

    const whereClause: any = {
      companyId: req.user!.companyId
      // visitType: 'STREET_MARKETING'
    };

    if (startDate && endDate) {
      whereClause.actualStartTime = {
        gte: new Date(startDate as string),
        lte: new Date(endDate as string)
      };
    }

    const interactions = await prisma.visit.findMany({
      where: whereClause,
      include: {
        agent: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true
          }
        },
        customer: {
          select: {
            id: true,
            name: true,
            // contactPhone: true
          }
        }
      }
    });

    const totalInteractions = interactions.length;
    const successfulInteractions = interactions.filter(i => i.status === 'COMPLETED').length;
    const conversionRate = totalInteractions > 0 ? (successfulInteractions / totalInteractions) * 100 : 0;

    res.json({
      success: true,
      data: {
        totalInteractions,
        successfulInteractions,
        conversionRate,
        interactions: interactions.map(interaction => ({
          id: interaction.id,
          agentId: interaction.agentId,
          customerId: interaction.customerId,
          startTime: interaction.actualStartTime,
          endTime: interaction.actualEndTime,
          status: interaction.status,
          notes: interaction.notes
        }))
      }
    });
  } catch (error) {
    console.error('Error fetching street marketing performance:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch street marketing performance'
    });
  }
});

export default router;