version: '3.8'

services:
  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: salessync-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
      - frontend
    networks:
      - salessync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Servers (Load Balanced)
  backend-1:
    build:
      context: ../backend
      dockerfile: Dockerfile.production
    container_name: salessync-backend-1
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - INSTANCE_ID=backend-1
    volumes:
      - backend-uploads:/app/uploads
      - backend-logs:/app/logs
      - backup-storage:/app/backups
    depends_on:
      - postgres
      - redis
    networks:
      - salessync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  backend-2:
    build:
      context: ../backend
      dockerfile: Dockerfile.production
    container_name: salessync-backend-2
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - INSTANCE_ID=backend-2
    volumes:
      - backend-uploads:/app/uploads
      - backend-logs:/app/logs
      - backup-storage:/app/backups
    depends_on:
      - postgres
      - redis
    networks:
      - salessync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Web Application
  frontend:
    build:
      context: ../frontend-web
      dockerfile: Dockerfile.production
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
        - REACT_APP_WS_URL=${REACT_APP_WS_URL}
    container_name: salessync-frontend
    environment:
      - NODE_ENV=production
    networks:
      - salessync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database with Replication
  postgres:
    image: postgres:15-alpine
    container_name: salessync-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - postgres-logs:/var/log/postgresql
    ports:
      - "5432:5432"
    networks:
      - salessync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: salessync-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - salessync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: salessync-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - salessync-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: salessync-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - salessync-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: salessync-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - salessync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: salessync-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - salessync-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: salessync-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - backend-logs:/var/log/backend:ro
      - postgres-logs:/var/log/postgresql:ro
      - ./nginx/logs:/var/log/nginx:ro
    networks:
      - salessync-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Backup Service
  backup:
    build:
      context: ../backend
      dockerfile: Dockerfile.backup
    container_name: salessync-backup
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - backup-storage:/app/backups
      - postgres-data:/var/lib/postgresql/data:ro
      - backend-uploads:/app/uploads:ro
    networks:
      - salessync-network
    restart: unless-stopped
    depends_on:
      - postgres

  # SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: salessync-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/webroot:/var/www/certbot
    command: certbot certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    networks:
      - salessync-network

  # Health Check Service
  healthcheck:
    build:
      context: ./healthcheck
      dockerfile: Dockerfile
    container_name: salessync-healthcheck
    environment:
      - SERVICES=backend-1:3000,backend-2:3000,postgres:5432,redis:6379
      - CHECK_INTERVAL=30
      - ALERT_WEBHOOK=${HEALTH_ALERT_WEBHOOK}
    networks:
      - salessync-network
    restart: unless-stopped
    depends_on:
      - backend-1
      - backend-2
      - postgres
      - redis

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  backend-uploads:
    driver: local
  backend-logs:
    driver: local
  backup-storage:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  postgres-logs:
    driver: local

networks:
  salessync-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16