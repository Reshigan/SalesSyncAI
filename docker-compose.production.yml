version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: salessync-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: salessync_prod
      POSTGRES_USER: salessync_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SalesSync2024!Prod}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - salessync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U salessync_user -d salessync_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: salessync-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-SalesSync2024!Redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - salessync-network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-SalesSync2024!Redis}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: salessync-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://salessync_user:${POSTGRES_PASSWORD:-SalesSync2024!Prod}@postgres:5432/salessync_prod
      REDIS_URL: redis://:${REDIS_PASSWORD:-SalesSync2024!Redis}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-SalesSync2024!JWT!Secret!Key!Production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-SalesSync2024!JWT!Refresh!Secret!Key!Production}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    ports:
      - "3000:3000"
    networks:
      - salessync-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web App with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000/api}
    container_name: salessync-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - salessync-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

networks:
  salessync-network:
    driver: bridge