version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: salessync-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: salessync_prod
      POSTGRES_USER: salessync_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SalesSync2024!Prod}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - salessync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U salessync_user -d salessync_prod"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: salessync-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-SalesSync2024!Redis}
    volumes:
      - redis_data_prod:/data
    ports:
      - "6379:6379"
    networks:
      - salessync-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: salessync-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://salessync_user:${POSTGRES_PASSWORD:-SalesSync2024!Prod}@postgres:5432/salessync_prod
      REDIS_URL: redis://:${REDIS_PASSWORD:-SalesSync2024!Redis}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-SalesSync2024!JWT!Secret!Key!Production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-SalesSync2024!JWT!Refresh!Secret!Key!Production}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://app.salessync.com}
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    ports:
      - "3000:3000"
    networks:
      - salessync-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: salessync-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.salessync.com}
      REACT_APP_ENVIRONMENT: production
    ports:
      - "80:80"
      - "443:443"
    networks:
      - salessync-network
    depends_on:
      - backend
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: salessync-nginx-prod
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - salessync-network
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  salessync-network:
    driver: bridge